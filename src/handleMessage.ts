import * as crypto from 'crypto'
import { TelegrafContext } from 'telegraf/typings/context'
import { InlineKeyboardMarkup } from 'telegram-typings'
import { Database as sqliteDatabase } from 'sqlite3'

import { State, processData } from './database'

function generatePostKeyboard(links?: {name: string, url: string}[], reactionButtons?: string[], postId?: string): InlineKeyboardMarkup['inline_keyboard'] {
    let keyboard = [];

    if (links && links.length == 1) {
        keyboard.push([
            { text: links[0].name, url: links[0].url }
        ]);
    } else if (links && links.length == 2) {
        keyboard.push([
            { text: links[0].name, url: links[0].url },
            { text: links[1].name, url: links[1].url }
        ]);
    } else if (links && links.length == 3) {
        keyboard.push([
            { text: links[0].name, url: links[0].url },
            { text: links[1].name, url: links[1].url }
        ]);
        keyboard.push([
            { text: links[2].name, url: links[2].url },
        ]);
    } else if (links && links.length == 4) {
        keyboard.push([
            { text: links[0].name, url: links[0].url },
            { text: links[1].name, url: links[1].url }
        ]);
        keyboard.push([
            { text: links[2].name, url: links[2].url },
            { text: links[3].name, url: links[3].url }
        ]);
    }

    if (reactionButtons && reactionButtons.length > 0) {
        let reactionButtonsKeyboardRow = [];
        for (let rb in reactionButtons) {
            reactionButtonsKeyboardRow.push({
                text: reactionButtons[rb] + ' 0',
                callback_data: postId ? `${postId}:${+rb+1}` : '#'
            });
        }
        keyboard.push(reactionButtonsKeyboardRow);
    }

    return keyboard;
}

export default async function handleMessage(ctx: TelegrafContext, db: sqliteDatabase) {
    let chatProcess = await processData.get(db);

    console.log(State[chatProcess.state]);
    console.log(chatProcess);

    if (chatProcess.state == State.notStarted) {
        if (ctx.message.text == '/start') {
            await processData.init(db);
            ctx.reply('üëâ –£–∫–∞–∂–∏—Ç–µ @username –∫–∞–Ω–∞–ª–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç', {
                reply_markup: {
                    keyboard: [
                        [ { text: '‚ùå –û—Ç–º–µ–Ω–∞' } ]
                    ],
                    resize_keyboard: true
                }
            });
        } else {
            ctx.reply('‚ÑπÔ∏è –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
        }
    } else if (ctx.message.text == '‚ùå –û—Ç–º–µ–Ω–∞') {
        await processData.drop(db);
        ctx.reply('‚ÑπÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ', {
            reply_markup: {
                remove_keyboard: true
            }
        });
    } else if (chatProcess.state == State.expectingChannel) {
        if (!ctx.message.text) return;
        let botInChannel = true;
        try {
            await ctx.telegram.getChatAdministrators(ctx.message.text);
        } catch (e) {
            botInChannel = false;
        }
        if (botInChannel) {
            await processData.setChannel(db, ctx.message.text);
            ctx.reply('üëâ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ø–æ—Å—Ç–∞');
        } else {
            ctx.reply('‚ùå –ë–æ—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ');
        }
    } else if (chatProcess.state == State.expectingText) {
        if (!ctx.message.text) return;
        if (ctx.message.text.length <= 1000) {
            await processData.setText(db, ctx.message.text);
            let replyText =
                'üëâ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –ø–æ—Å—Ç–∞\n' +
                '\n' +
                '‚ÑπÔ∏è –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º "–Ω–µ—Ç"';
            ctx.reply(replyText);
        } else {
            ctx.reply('‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞ - 1000 —Å–∏–º–≤–æ–ª–æ–≤');
        }
    } else if (chatProcess.state == State.expectingImage) {
        let replyText =
            'üëâ –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n' +
            '–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏1 - —Å—Å—ã–ª–∫–∞1\n' +
            '–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏2 - —Å—Å—ã–ª–∫–∞2\n' +
            '\n' +
            'üëâ –ù–∞–ø—Ä–∏–º–µ—Ä\n' +
            'Google - https://google.com\n' +
            '\n' +
            '‚ÑπÔ∏è –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º "–Ω–µ—Ç"';
        if (ctx.message.photo) {
            await processData.setImage(db, ctx.message.photo[0].file_id);
            ctx.reply(replyText);
        } else if (ctx.message.text && ctx.message.text.toLowerCase() == '–Ω–µ—Ç') {
            await processData.setImage(db, null);
            ctx.reply(replyText);
        } else {
            ctx.reply('‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É');
        }
    } else if (chatProcess.state == State.expectingLinks) {
        if (!ctx.message.text) return;
        let replyText =
            'üëâ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫-—Ä–µ–∞–∫—Ü–∏–π (–Ω–µ –±–æ–ª–µ–µ 3—ë—Ö)\n' +
            '\n' +
            'üëâ –ù–∞–ø—Ä–∏–º–µ—Ä:\n' +
            'üëç/üòê/üëé\n' +
            '\n' +
            '‚ÑπÔ∏è –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏-—Ä–µ–∞–∫—Ü–∏–∏ –Ω–µ –Ω—É–∂–Ω—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º "–Ω–µ—Ç"';
        if (ctx.message.text.toLowerCase() == '–Ω–µ—Ç') {
            await processData.setLinks(db, null);
            ctx.reply(replyText);
        } else {
            let links = ctx.message.text.split('\n');
            let rawLinks: {name: string, url: string}[] = [];
            for (let link of links) {
                if (link.includes(' - ')) {
                    let splitted = link.split(' - ');
                    rawLinks.push({
                        name: splitted[0],
                        url: splitted[1]
                    });
                } else {
                    ctx.reply('‚ùå –ö–∞–∂–µ—Ç—Å—è, –≥–¥–µ-—Ç–æ –≤—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É');
                    return;
                }
            }
            let keyboard = generatePostKeyboard(rawLinks, []);
            if (keyboard.length) {
                try {
                    await ctx.reply('‚ÑπÔ∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫', {
                        reply_markup: {
                            inline_keyboard: keyboard
                        }
                    });
                } catch (e) {
                    ctx.reply('‚ùå –ö–∞–∂–µ—Ç—Å—è, –≥–¥–µ-—Ç–æ –≤—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É');
                    return;
                }
            }
            await processData.setLinks(db, rawLinks);
            ctx.reply(replyText);
        }
    } else if (chatProcess.state == State.expectingReactionButtons) {
        if (!ctx.message.text) return;
        if (ctx.message.text.toLowerCase() == '–Ω–µ—Ç') {
            await processData.setReactionButtons(db, null);
            await ctx.reply('üéâ –ü–æ—Å—Ç –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫');
            if (chatProcess.image) {
                await ctx.replyWithPhoto(chatProcess.image, {
                    caption: chatProcess.text,
                    reply_markup: {
                        inline_keyboard: generatePostKeyboard(chatProcess.links, [])
                    }
                });
            } else {
                await ctx.reply(chatProcess.text, {
                    reply_markup: {
                        inline_keyboard: generatePostKeyboard(chatProcess.links, [])
                    }
                });
            }
            await ctx.reply('‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å?', {
                reply_markup: {
                    keyboard: [
                        [ { text: '‚ùå –û—Ç–º–µ–Ω–∞' }, { text: '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å' } ]
                    ],
                    resize_keyboard: true
                }
            });
        } else {
            let reactions = ctx.message.text.split('/');
            if (reactions.length > 3) {
                ctx.reply('‚ùå –ù–µ–ª—å–∑—è —É–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ 3—ë—Ö —ç–º–æ–¥–∑–∏');
            } else if (reactions.filter(r => r.length == 0).length) {
                ctx.reply('‚ùå –û—à–∏–±–∫–∞');
            } else {
                await processData.setReactionButtons(db, reactions);
                await ctx.reply('üéâ –ü–æ—Å—Ç –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫');
                if (chatProcess.image) {
                    await ctx.replyWithPhoto(chatProcess.image, {
                        caption: chatProcess.text,
                        reply_markup: {
                            inline_keyboard: generatePostKeyboard(chatProcess.links, reactions)
                        }
                    });
                } else {
                    await ctx.reply(chatProcess.text, {
                        reply_markup: {
                            inline_keyboard: generatePostKeyboard(chatProcess.links, reactions)
                        }
                    });
                }
                await ctx.reply('‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å?', {
                    reply_markup: {
                        keyboard: [
                            [ { text: '‚ùå –û—Ç–º–µ–Ω–∞' }, { text: '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å' } ]
                        ],
                        resize_keyboard: true
                    }
                });
            }
        }
    } else if (chatProcess.state == State.readyToPost) {
        if (!ctx.message.text) return;
        if (ctx.message.text.toLowerCase().includes('–æ—Ç–ø—Ä–∞–≤–∏—Ç—å')) {
            let postId = crypto.randomBytes(8).toString('hex');
            if (chatProcess.image) {
                await ctx.telegram.sendPhoto(chatProcess.channel, chatProcess.image, {
                    caption: chatProcess.text,
                    reply_markup: {
                        inline_keyboard: generatePostKeyboard(chatProcess.links, chatProcess.reactionButtons, postId)
                    }
                });
            } else {
                await ctx.telegram.sendMessage(chatProcess.channel, chatProcess.text, {
                    reply_markup: {
                        inline_keyboard: generatePostKeyboard(chatProcess.links, chatProcess.reactionButtons, postId)
                    }
                });
            }
            await processData.drop(db);
            ctx.reply('üéâ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', {
                reply_markup: {
                    remove_keyboard: true
                }
            });
        } else {
            ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å –ø–æ—Å—Ç–æ–º', {
                reply_markup: {
                    keyboard: [
                        [ { text: '‚ùå –û—Ç–º–µ–Ω–∞' }, { text: '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å' } ]
                    ],
                    resize_keyboard: true
                }
            });
        }
    } else {
        throw 'Error: no such chatProcess.state registered - ' + chatProcess.state;
    }
}

